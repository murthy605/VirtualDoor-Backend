from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
import os

app = Flask(__name__)
basedir = os.path.abspath(os.path.dirname(__file__))
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(basedir, 'securitypage.sqlite')
db = SQLAlchemy(app)
ma = Marshmallow(app)


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    usn = db.Column(db.String(80), unique=True)
    identity = db.Column(db.String(120), unique=True)

    def __init__(self, usn, identity):
        self.usn = usn
        self.identity = identity
		
class UserSchema(ma.Schema):
    class Meta:
        # Fields to expose
        fields = ('usn', 'identity')


user_schema = UserSchema()
users_schema = UserSchema(many=True)
	
@app.route("/user/addUser", methods=["POST"])
def add_user():
    usn = request.form['usn']
    identity = request.form['identity']
    
    new_user = User(usn, identity)
    result = user_schema.dump(new_user)

    db.session.add(new_user)
    db.session.commit()
    #data = user_schema.dump(new_user).data
    return jsonify(result)
# endpoint to show all users
@app.route("/user/showAll", methods=["GET"])
def get_user():
    all_users = User.query.all()
    result = users_schema.dump(all_users)
    return jsonify(result.data)


# endpoint to get user detail by id
@app.route("/user/<id>", methods=["GET"])
def user_detail(id):
    user = User.query.get(id)
    return user_schema.jsonify(user)


# endpoint to update user
@app.route("/user/<id>", methods=["PUT"])
def user_update(id):
    user = User.query.get(id)
    usn = request.json['usn']
    identity = request.json['identity']

    user.identity = identity
    user.usn = usn

    db.session.commit()
    return user_schema.jsonify(user)

# endpoint to delete user
@app.route("/user/<id>", methods=["DELETE"])
def user_delete(id):
    user = User.query.get(id)
    db.session.delete(user)
    db.session.commit()

    return user_schema.jsonify(user)


if __name__ == '__main__':
    app.run(debug=True)
    #app.run(host='0.0.0.0')
